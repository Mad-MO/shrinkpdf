#!/usr/bin/env bash

# Script info
script_name="domoShrinkPDF"
script_version="v1.1"
script_tools="echo date figlet tput clear test"

########################
# Definition of colors #
########################

# General colors
color_off="\033[0m"
color_black="\033[0;30m"
color_red="\033[0;31m"
color_green="\033[0;32m"
color_yellow="\033[0;33m"
color_blue="\033[0;34m"
color_purple="\033[0;35m"
color_cyan="\033[0;36m"
color_white="\033[0;37m"
color_bold_black="\033[1;30m"
color_bold_red="\033[1;31m"
color_bold_green="\033[1;32m"
color_bold_yellow="\033[1;33m"
color_bold_blue="\033[1;34m"
color_bold_purple="\033[1;35m"
color_bold_cyan="\033[1;36m"
color_bold_white="\033[1;37m"

# Theme colors
color_header=$color_bold_red
color_time=$color_bold_purple
color_section=$color_bold_yellow
color_mark=$color_bold_white
color_error=$color_bold_red

########################
# Define exit function #
########################

# Function to end script with exit code and wait for ENTER to close window (if not started from shell)
function ScriptExit()
{
  if [ "$SCRIPT_STARTED_IN_X" = "1" ] || [ ! -z ${MC_SID+x} ]; then # Started in gnome-terminal or Midnight Commander?
    if [ "$1" -ne "0" ]; then
      echo -e "Exitcode $color_mark$1$color_off"
    fi
    echo
    echo -e "Press $color_mark""ENTER$color_off to close window"
    read
  fi

  if [ "$1" ]; then
    exit $1
  else
    exit
  fi
}

###############################
# Handle Terminal Environment #
###############################

if [ -t 0 ] && [ -t 1 ] && [ -t 2 ]; then # STDIN, STDOUT and STDERR defined?
  if [ ! -z ${MC_SID+x} ]; then # Started in Midnight Commander?
    clear
  fi
  echo -en "$color_off""Running $color_mark$script_name$color_off version $color_mark$script_version$color_off"
  if [ "$SCRIPT_STARTED_IN_X" = 1 ]; then
    echo -en " in $color_mark""X$color_off"
  else
    SCRIPT_STARTED_IN_X=0
    set -u # From her on warn about empty variables
    echo -en " in $color_mark""Terminal$color_off"
    if [ ! -z ${MC_SID+x} ]; then # Started in Midnight Commander?
      echo -en " started from $color_mark""mc$color_off"
    fi
  fi
  echo -en " as user $color_mark$(id -un)$color_off"
  if   [ $# -eq 1 ]; then
    echo -e " with parameter $color_mark$@$color_off"
  elif [ $# -gt 1 ]; then
    echo -en " with $color_mark$#$color_off parameters$color_mark"
    for x in "$@"; do
      echo -en " \"$x\""
    done
    echo -e "$color_off"
  else
    echo -e " with $color_mark""no$color_off parameters"
  fi
else
  # No Terminal found, starting gnome-terminal
  gnome-terminal --title $script_name" "$script_version -- /usr/bin/env "SCRIPT_STARTED_IN_X=1" "$0" "$@"
  exit
fi

####################
# Check Parameters #
####################

if [ $# -gt 0 ]; then # Parameter given?
  if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: shrinkpdf [OPTIONS] FILES"
    echo
    echo "shrinkpdf will shrink the given PDF."
    echo
    echo "Options"
    echo "-h, --help      This help"
    echo "-d, --debug     print all executed commands"
    echo
    echo "Exit status:"
    echo " 0  if OK"
    echo " 1  if ERROR"
    ScriptExit 0
  elif [ "$1" = "--debug" ] || [ "$1" = "-d" ]; then
    set -x
    shift
  fi
fi

##########################
# Check for needed tools #
##########################

for x in $script_tools; do # Run through tool list
  which $x > /dev/null
  if [ $? -ne 0 ]; then
    echo -e "Tool $color_mark$x$color_off is missing!"
    ScriptExit 1
  fi
done

############################
# Show script startup info #
############################

echo -ne "$color_header"
figlet $script_name -w $(tput cols)
echo -e "$color_header$script_name $script_version$color_off"
echo

##########################
# Start time measurement #
##########################

echo -e "Starting $color_time$(date '+%Y-%m-%d %H:%M:%S')$color_off"
script_start=$(date '+%s')
echo

##########
# Script #
##########

filecount=$#
filenum=0
for inputfile in "$@"; do
  # Get name parts of old file
  filename="${inputfile##*/}"
  directory="${inputfile:0:${#inputfile} - ${#filename}}"
  basename="${inputfile%.[^.]*}"
  extension=$(echo "${inputfile:${#basename} + 1}" | tr [:upper:] [:lower:])

  #echo "inputfile: $inputfile"
  #echo "filename:  $filename"
  #echo "directory: $directory"
  #echo "basename:  $basename"
  #echo "Extension: $extension"

  # Handle file shrinking
  filenum=$((filenum+1))
  echo -ne "$color_section[$filenum/$filecount]$color_off "

  if [ "$extension" == "pdf" ]; then
    outputfile="$basename.shrinked.pdf"
    echo -e "Shrinking $color_mark'"$(basename "$inputfile")"'$color_off to $color_mark'"$(basename "$outputfile")"'$color_off"
    gs -sDEVICE=pdfwrite -dPDFSETTINGS=/ebook -q -o "$outputfile" "$inputfile"
  else
    echo -e "$color_mark'"$inputfile"'$color_error has a wrong extension!$color_off"
  fi
done

#########################
# Stop time measurement #
#########################

echo
echo -e "Finished $color_time$(date '+%Y-%m-%d %H:%M:%S')$color_off"
script_end="$(date '+%s')"
script_duration="$(( $script_end - $script_start ))"
echo -e "Duration $color_time$script_duration sec$color_off"
echo

###############
# Exit script #
###############

ScriptExit 0
